"""
This type stub file was generated by pyright.
"""

from .base_dataset import BaseDataset

log = ...


class ShapeNet(BaseDataset):
    """This class is used to create a dataset based on the ShapeNet dataset, and
    used in object detection, visualizer, training, or testing.

    The ShapeNet dataset includes a large set of 3D shapes.
    """

    def __init__(self, dataset_path, name=..., class_weights=..., ignored_label_inds=..., test_result_folder=..., task=..., **kwargs) -> None:
        """Initialize the function by passing the dataset and other details.

        Args:
            dataset_path: The path to the dataset to use.
            name: The name of the dataset (ShapeNet in this case).
            class_weights: The class weights to use in the dataset.
            ignored_label_inds: A list of labels that should be ignored in the dataset.
            test_result_folder: The folder where the test results should be stored.
            task: The task that identifies the purpose. The valid values are classification and segmentation.

        Returns:
            class: The corresponding class.
        """
        ...

    @staticmethod
    def get_label_to_names(task=...):  # -> dict[int, str]:
        """Returns a label to names dictonary object depending on the task. The
        valid values for task for classification and segmentation.

        Returns:
            A dict where keys are label numbers and values are the corresponding
            names.
        """
        ...

    def get_split(self, split):  # -> ShapeNetSplit:
        """Returns a dataset split.

        Args:
            split: A string identifying the dataset split that is usually one of
            'training', 'test', 'validation', or 'all'.

        Returns:
            A dataset split object providing the requested subset of the data.
        """
        ...

    def get_split_list(self, split):  # -> List[Unknown]:
        """Returns the list of data splits available.

        Args:
            split: A string identifying the dataset split that is usually one of
            'training', 'test', 'validation', or 'all'.

        Returns:
            A dataset split object providing the requested subset of the data.

        Raises:
            ValueError: Indicates that the split name passed is incorrect. The split name should be one of
            'training', 'test', 'validation', or 'all'.
        """
        ...

    def is_tested(self, attr):  # -> bool:
        """Checks if a datum in the dataset has been tested.

        Args:
            attr: The attribute that needs to be checked.

        Returns:
            If the datum attribute is tested, then return the path where the
                attribute is stored; else, returns false.
        """
        ...

    def save_test_result(self, results, attr):  # -> None:
        """Saves the output of a model.

        Args:
            results: The output of a model for the datum associated with the attribute passed.
            attr: The attributes that correspond to the outputs passed in results.
        """
        ...


class ShapeNetSplit:
    """The class gets data and atributes based on the split and
    classification.
    """

    def __init__(self, dataset, split=..., task=...) -> None:
        ...

    def __len__(self):  # -> int:
        ...

    def get_data(self, idx):  # -> dict[str, Unknown]:
        ...

    def get_attr(self, idx):  # -> dict[str, Unknown]:
        ...
