from typing import Tuple, List, overload
from enum import Enum
from numpy import float64
from numpy.typing import NDArray


class PinholeCameraIntrinsic:
    height: int
    width: int
    intrinsic_matrix: NDArray[float64]
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: PinholeCameraIntrinsic) -> None: ...

    @overload
    def __init__(
        self, width: int, height: int, fx: float, fy: float, cx: float, cy: float
    ) -> None: ...
    @overload
    def __init__(self, param: PinholeCameraIntrinsicParameters) -> None: ...
    def get_focal_length(self) -> Tuple[float, float]: ...
    def get_principal_point(self) -> Tuple[float, float]: ...
    def get_skew(self) -> float: ...
    def is_valid(self) -> bool: ...

    def set_intrinsics(
        self, width: int, height: int, fx: float, fy: float, cx: float, cy: float
    ) -> None: ...


class PinholeCameraParameters:
    extrinsic: NDArray[float64]
    intrinsic: PinholeCameraIntrinsic
    def __init__(self, *args, **kwargs) -> None: ...


class PinholeCameraIntrinsicParameters(Enum):
    Kinect2ColorCameraDefault = ...
    Kinect2DepthCameraDefault = ...
    PrimeSenseDefault = ...


class PinholeCameraTrajectory:
    parameters: List[PinholeCameraParameters]
    def __init__(self, *args, **kwargs) -> None: ...
